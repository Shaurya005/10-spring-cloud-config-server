Different challenges with building our microservices:-

Challenge 1 - Bounded Context.

Earlier we said instead of one big monolith application we would be building about 5 small microservices or 10 or 20 or hundred.
How do you identify the boundary for each of these microservices? How do you identify what to do in each of these microservices?

How do you decide what you should do and what you should not do? The thing is, for new applications this is especially much more difficult
because probably you don't really have the business knowledge to be able to establish the right boundaries between these microservices.

In my experience, deciding the boundaries of microservices is an evolutionary process. It's not something you would get it right the first time.
It's something which you need to play around with. Try and follow domain and design. Try to identify the right boundaries for the microservices
based on the knowledge you have at that point in time. The important thing to understand is as you keep gaining knowledge you should put that 
knowledge back into the microservices into deciding what is the right boundaries for these microservices.

The next important challenge for microservices - Configuration Management.

We said we would have 5 or 50 microservices. These microservices have multiple instances in each environment and there are multiple environments.
So let's say there are 10 microservices with 5 environments, and let's say 50 instances. So we are talking about basically tons of configuration
and that's a lot of work for the operation team to maintain.

Another important challenge is the Dynamic scale up and scale down i.e. establishing the technology to be able to do that.
The loads on different microservices will be different at different instances of time and at particular instance, I might need 2 instances
of Microservice2, but later at a different point in time I might be needing 10 instances of this.

So I should be able to bring the new instances of microservices up and bring down older instances of microservices when they are not really needed.
All this with dynamic load balancing because when there is one instance of Microservice1 and there are 4 instances of Microservice2 then I would 
want to distribute the load between all the instances of Microservice2.

And if there are four instances of Microservice2 coming up, then I would want to ensure that all the new ones are also being used to the fullest extent.
So we need the ability to dynamically bring in new instances and also to distribute the load among the new instances.

The fourth and one of the most important challenges is visibility. If I say the functionality is now distributed among 10 microservices and 
there's a bug, how do you identify where the bug is? You need to have a centralized log where I can go and find out what happened for a specific request.

Which microservice caused the problem? Not just that we also need monitoring around these microservices because we have hundreds of microservices. 
We need to be able to identify the microservices which are down. We would want to be able to automatically identify servers where there is not enough disc space.
All these kind of things need to be automated. So we need great visibility into what's happening with these microservices.

And the last, but not the least important of them is the fact that if it's not well designed, microservices architectures can be like pack of cards.
I mean that in microservices architectures you have one microservice calling another, another calling another. So there would be
certain microservices which would be the fundamental for the whole thing. And if that microservice goes down then the entire application might go down.

So it's like a pack of cards. You're building one over the top of the other and so on and so on, and therefore they can collapse very easily
and therefore it's very important for you to have fall tolerance in your microservices.

We looked at the five important challenges related to microservices. We started with bounded context, identifying what is the right context for your microservice?
What is the right boundary for your microservice? We talked about the problem of configuration management. Hundreds of microservices and a lot of environments so
there is tons of configuration that you would want to manage. How do we simplify that? We would want to be able to dynamically scale up and scale down and
dynamically distribute load among the active instances. How do we do that?

We want to have great visibility into what's happening behind the scenes with each of these microservices. A simple request might involve 10 microservices.
How do I determine which microservice was the cause for a defect? How do I know if all my microservices are up and running and how do I prevent one microservice
being down, taking down the entire application? How do I build fault tolerance into my microservices?



Here we will be discussing about some of the advantages of microservice architectures.

The most important advantage of the microservice architecture is that it enables you to adapt new technology and processes very easily.
When we build applications as a combination of microservices which can communicate with each other using simple messages, each of these microservices can be built
in different technologies. In typical monolith applications we would not have that flexibility. For example, Microservice1 might be Java. Microservice2 might be NodeJs.
Microservice3 might be written in Kotlin and tomorrow there might be a language xyz which is really doing well and which provides a lot of benefits to you and you
can easily create a microservice in that specific language. And also for the new microservices that we create we can bring in new processes as well.

The other important advantage of microservices is Dynamic Scaling.

Consider an online shopping application like Amazon. They don't really have the same amount of load or same amount of traffic, or same amount of users throughout the year.

Especially during the holiday season, the load on the applications will be lot and during the rest of the year there might not be so much load.
During the Black Friday there might be a huge amount of load. If your microservices are cloud enabled they can scale dynamically and you can procure hardware
and release it dynamically as well. So you can scale up your applications and scale them down based on the load.

Because you're developing smaller components it's much easier to release microservices compared to monolith applications.
This means that you can bring new features faster to market and that's a big advantage to have in the modern world.

In this video, we discuss about three of the most important advantages of microservices -

 - Adaption of new technology and processes,
 - Dynamic Scaling
 - and faster release cycles.

